import { By, Key } from 'selenium-webdriver';
import { driver, browser, markers } from 'thousandeyes';

runScript();

async function runScript() {
    
    await configureDriver();
    
    


    markers.start('HomePage');
    await driver.get('https://am.jpmorgan.com/tools/dt-ic/');
    markers.stop('HomePage');
    
    markers.start('Guest');
    // Click on 'USE AS GUEST'
	await click(By.css(`[data-test="use-as-guest"]`));
    markers.stop('Guest');


    markers.start('CreateNewReport');
        // Click on 'create new report'
	await click(By.css(`.col-24:nth-child(1) img`));
    markers.stop('CreateNewReport');


    markers.start('EaseSearch');

    await typeText('lbfix', By.css(`[placeholder="Ticker symbol or investment name"]`));

    // Click on 'ClearBridge Select I'
	await click(By.css(`.AutoSuggestedInstrument_name > div`));
    markers.stop('EaseSearch');

    
    markers.start('SelectAnotherFund');
    // Click on 'JCMAX JPMorgan Mid Cap Equity A'
	await click(By.css(`.col-8:nth-child(2) > label`));

    // Click on 'NEXT'
	await click(By.css(`.StickyProgress_btnMain`));
    markers.stop('SelectAnotherFund');


    markers.start('RunComparison');
    await click(By.css(`[data-test="card_BBG000XPCGQ0"] .RadioButton__icon`));

    // Click on 'RUN COMPARISON'
	await click(By.css(`.StickyProgress_btnMainText`));
    markers.stop('RunComparison');


    // Click on 'LBFIX'
	await click(By.css(`.c-investment-header__ticker:nth-child(1)`));

    await click(By.css(`.DrawerModal_close-icon`));
    
}

async function configureDriver() {
    await driver.manage().window().setRect({ 
        width: 1200, 
        height: 959
    });
    await driver.manage().setTimeouts({
        implicit: 7 * 1000, // If an element is not found, reattempt for this many milliseconds
    });
}



async function click(selector) {
    await simulateHumanDelay();

    const configuredTimeouts = await driver.manage().getTimeouts();
    const clickAttemptEndTime = Date.now() + configuredTimeouts.implicit;

    await reattemptUntil(attemptToClick, clickAttemptEndTime);
    
    async function attemptToClick() {
        await driver.findElement(selector)
                    .click();
    }
}

async function reattemptUntil(attemptActionFn, attemptEndTime) {
    const TIME_BETWEEN_ATTEMPTS = 100;
    let numberOfAttempts = 0;
    let attemptError;
    while (Date.now() < attemptEndTime || numberOfAttempts === 0) {
        try {
            numberOfAttempts += 1;
            await attemptActionFn();
        }
        catch (error) {
            attemptError = error;
            await driver.sleep(TIME_BETWEEN_ATTEMPTS);
            continue; // Attempt failed, reattempt
        }
        attemptError = null;
        break; // Attempt succeeded, stop attempting
    }

    const wasAttemptSuccessful = !attemptError;
    if (!wasAttemptSuccessful) {
        throw attemptError;
    }
}

async function simulateHumanDelay() {
    await driver.sleep(550);
}

async function typeText(value, selector) {
    await simulateHumanDelay();
    const element = await driver.findElement(selector);
    await element.clear();
    await element.sendKeys(value);
}
